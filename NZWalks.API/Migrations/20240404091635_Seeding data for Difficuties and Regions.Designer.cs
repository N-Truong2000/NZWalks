// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NZWalks.API.Data;

#nullable disable

namespace NZWalks.API.Migrations
{
    [DbContext(typeof(NZWalksDbContext))]
    [Migration("20240404091635_Seeding data for Difficuties and Regions")]
    partial class SeedingdataforDifficutiesandRegions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NZWalks.API.Models.Domain.Difficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c75f1fbc-e53b-4684-a6e4-1b418be72111"),
                            Name = "Easy"
                        },
                        new
                        {
                            Id = new Guid("aac0b969-806a-426d-aeba-095be6b354c0"),
                            Name = "Medium"
                        },
                        new
                        {
                            Id = new Guid("947bed47-1b7f-4ed7-89d3-caff90030b3a"),
                            Name = "Hard"
                        });
                });

            modelBuilder.Entity("NZWalks.API.Models.Domain.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9905f19a-dca5-40a4-8b4f-ffc2090f2976"),
                            Code = "5899",
                            Name = "AuckLand",
                            RegionImageUrl = "https://www.google.com/url?sa=i&url=https%3A%2F%2Fsnapshot.canon-asia.com%2Fvn%2Farticle%2Fviet%2Flandscape-photography-quick-tips-for-stunning-deep-focused-images&psig=AOvVaw10bfNlfnVznIXoqSjdr7n6&ust=1712307601380000&source=images&cd=vfe&opi=89978449&ved=0CBIQjRxqFwoTCMDj-ISZqIUDFQAAAAAdAAAAABAE"
                        },
                        new
                        {
                            Id = new Guid("1ef6a9d2-48a1-4528-a1ff-e41dfe38c06b"),
                            Code = "5990",
                            Name = "NelSon",
                            RegionImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQMhaMUyMmwZFNmsB3fNsXJARE6p8RHXsYCfSM_4qAGHOgn0dhNin0siPsuQpJF66SqrQo&usqp=CAU"
                        },
                        new
                        {
                            Id = new Guid("b50812fa-ee88-4d12-af90-85e597e45251"),
                            Code = "6983",
                            Name = "SoutnLand",
                            RegionImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRejEC0q_n6SqMGbJMC5Q8H1bgsqN0YMln_amAkMSOmHw&s"
                        },
                        new
                        {
                            Id = new Guid("e12cb6cb-1560-41ad-a653-34f5d92eca7e"),
                            Code = "6214",
                            Name = "AN Do"
                        });
                });

            modelBuilder.Entity("NZWalks.API.Models.Domain.Walk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("LengthInKm")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalkImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("RegionId");

                    b.ToTable("Walks");
                });

            modelBuilder.Entity("NZWalks.API.Models.Domain.Walk", b =>
                {
                    b.HasOne("NZWalks.API.Models.Domain.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NZWalks.API.Models.Domain.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("Region");
                });
#pragma warning restore 612, 618
        }
    }
}
